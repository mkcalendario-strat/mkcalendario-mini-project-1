[
  {
    "id": "aqueyes",
    "title": "AquEyes",
    "description": "A deep learning-powered tool for detecting and classifying common fish eye diseases in murky waters, combining yolo, image augmentation, and real-time feedback for aquaculture monitoring.",
    "image": "aqueyes.webp",
    "stack": ["yolo", "albumentation", "react", "sass", "flask", "socket.io"],
    "markdown": "# AquEyes 👁️🔬\n\nAquEyes is a deep learning–powered web app for detecting and classifying fish eye diseases in murky waters. It provides real-time feedback for aquaculture monitoring and disease detection.\n\n---\n\n## 🌟 Project Overview\n\nAquEyes combines computer vision and real-time communication to help fish farmers and researchers monitor eye health in aquaculture environments. It uses YOLO for object detection and a Flask API for deep learning inference, with a sleek React frontend that streams camera input live and overlays classification results.\n\n---\n\n## 🧠 Technologies Used\n\n- **YOLO** – For real-time fish eye detection in images or video frames.\n- **Albumentations** – Used for data augmentation during training.\n- **React** – Frontend framework for building a responsive UI.\n- **Sass** – For modular and maintainable styling.\n- **Flask** – Backend API to serve deep learning models.\n- **Socket.IO** – For real-time bidirectional communication between frontend and backend.\n\n---\n\n## 🚀 Key Features\n\n- Real-time fish eye disease detection using live video.\n- Classification overlay on camera feed.\n- Lightweight backend serving a trained YOLO model.\n- Fast, responsive, and mobile-friendly UI.\n- Modular structure that allows easy model upgrades or camera source changes.\n\n---\n\n## 📌 Live Demo\n\n[🔗 Visit AquEyes](http://aqueyes.vercel.app/)\n\n---\n\n## 📝 Future Improvements\n\n- Add logging of predictions over time.\n- Enable support for image upload in addition to webcam feed.\n- Add on-device model inference support using ONNX or TensorFlow.js.\n- Deploy a dashboard for statistical monitoring and data export.\n\n---\n\n## 🧰 How to Use\n\n1. Open the web app in a browser.\n2. Allow camera access when prompted.\n3. Point your camera at fish in water — the app will detect and classify eye conditions automatically.\n4. Observe results directly on the screen, with bounding boxes and disease names.\n\n---"
  },
  {
    "id": "learningaxies",
    "title": "LEARNINGAXIES",
    "description": "A responsive educational platform developed for Axies Education Inc., utilizing React, Sass, Node, Express, and MySQL to deliver engaging, scalable, and user-friendly learning experiences online.",
    "image": "learningaxies.webp",
    "stack": ["react", "sass", "express", "node", "mysql"],
    "markdown": "# 📚 Learningaxies\n\nLearningaxies is a modern online learning platform offering live, interactive classes designed to empower learners of all ages. With a focus on both academic and non-academic subjects, it provides a flexible and engaging environment for personal and professional growth.\n\n---\n\n## 🎯 Mission & Vision\n\nAxies envisions a world where learners of any age have access to education that matters: classes that target skills beyond academics, cultivate passion and potential, and empower students to thrive in the real world.\n\n---\n\n## 🧠 Courses & Workshops\n\n### 🔹 Summer Workshops\n\nIn June 2024, Axies offered various workshops aimed at enhancing skills and fostering creativity:\n\n- **Creative Writing Class**\n- **Beginners Guitar Workshop**\n- **Debate Workshop**\n\nThese classes were conducted by experienced educators from the University of the Philippines.\n\n### 🔹 Homeschooling Support\n\nAxies provides resources and guidance for parents interested in homeschooling, emphasizing the benefits of personalized learning experiences and the flexibility to study from various locations.\n\n---\n\n## 🌐 Online Platform\n\nThe platform offers:\n\n- **Live, interactive classes** across various subjects\n- **Support for homeschooling** families\n- **Workshops** focusing on skill development and creativity\n\nFor more information and to explore available classes, visit [learningaxies.com](https://learningaxies.com).\n\n---\n\n## 📞 Contact Information\n\n- **Phone**: +63962383115\n- **Email**: info@axieseducation.com\n"
  },
  {
    "id": "echo",
    "title": "ECHO",
    "description": "A live streaming platform that replicates core Twitch features, enabling real-time video broadcasting, user interaction, and a smooth, engaging viewing experience.",
    "image": "echo.webp",
    "stack": [
      "nginx",
      "socket.io",
      "react",
      "sass",
      "express",
      "mysql",
      "prisma"
    ],
    "markdown": "# **echo.tv**\n\nA simple Twitch clone for exploring live streaming with **NGINX, RTMP, and HLS**. Users can stream via OBS or other software and watch other streams.\n\n## **Features**\n\n- Low-latency streaming\n- Stream & user authentication\n- Watch other users' live streams\n\n---\n\n## **Setup Guide**\n\n### **1. Client (Frontend)**\n\n```bash\ncd client\nnpm install\nnpm run dev  # Starts the frontend at http://localhost:5173\n```\n\n### **2. Server (Backend)**\n\n```bash\ncd ../server\nnpm install\nnpm run dev  # Starts the backend at http://localhost:5174\n```\n\n### **3. Database (MySQL + Prisma)**\n\n```bash\nnpm run prisma:migrate:dev  # Creates schema to MySQL\nnpm run prisma:generate:dev  # Generates Prisma client (for intellisense)\n```\n\n### **4. NGINX for RTMP & HLS**\n\n**Install NGINX with RTMP Module**\n\n```bash\nsudo apt install nginx libnginx-mod-rtmp -y\n```\n\n**Configure NGINX Server**\n\nAppend the RTMP block from `/configs/nginx/nginx.conf` to `nginx.conf`\n\n```bash\nsudo nano /etc/nginx/nginx.conf  # Add RTMP settings\n```\n\nCreate an HTTP configuration for HLS and STAT\n\n```bash\ncp configs/nginx/echo.conf /etc/nginx/sites-available/echo.conf\n```\n\nApply changes\n\n```bash\nsystemctl restart nginx\n```\n\n---\n\n## **How Streaming Works**\n\n1. **RTMP (Real-Time Messaging Protocol)**\n   - Used by streaming software (e.g., OBS) to send live video to a media server.\n   - Ensures a stable and low-latency connection between the broadcaster and the server.\n2. **HLS (HTTP Live Streaming)**\n   - Converts the RTMP stream into smaller video segments (.ts files).\n   - Creates a playlist (.m3u8) that allows adaptive playback on web browsers and mobile devices.\n\nTogether, **RTMP handles video ingestion**, while **HLS makes it playable for viewers**.\n\n---\n\n## **What is STAT in RTMP?**\n\n**STAT** is an **RTMP status report** that provides real-time information about active streams on the RTMP server. It helps monitor stream activity, including:\n\n- **Current live streams**\n- **Bitrate and bandwidth usage**\n- **Connected viewers**\n- **Stream key details**\n\n📌 In our setup, it was used to track stream heartbeats. These heartbeats help detect streams that appear LIVE but are no longer active, ensuring they are correctly marked as OFFLINE. To check the RTMP status:\n\n```bash\ncurl http://172.23.238.4:5175/stat\n```\n\n📌 This is useful for debugging and monitoring stream performance.\n\n---\n\n## **Connecting OBS to RTMP Server**\n\n1. **RTMP URL:** `rtmp://172.23.238.4:1935/live`\n2. **OBS Settings:**\n   - Go to **Settings > Stream**\n   - Set **Service: Custom**\n   - Enter **RTMP URL** + **`Your Stream Key`**\n3. **Start Streaming**\n\n📌 **Watch via HLS:** `http://172.23.238.4:5175/hls/Your Stream Key/index.m3u8`\n"
  },
  {
    "id": "detext-ai",
    "title": "DETEXT AI",
    "description": "A fraud detection tool that analyzes text using a custom dataset and transformer-based natural language processing to identify suspicious or deceptive content.",
    "image": "detext.webp",
    "stack": ["huggingface", "react", "sass", "fastapi", "docker"],
    "markdown": "# 🐱‍👤 Detext\n\n**Detext** is a web-based text classification tool that determines whether a given text is \"safe\" or \"fraud\". It uses technologies such as **React**, **FastAPI**, **Pydantic**, **Huggingface's Transformers** to offer a robust solution for text classification tasks. The Detext's dataset is built from the three collated fraud/scam/spam datasets.\n\n---\n\n## 🎯 Purpose\n\nTo classify text as either \"safe\" or \"fraud\" using machine learning models.\n\n---\n\n## 🚀 Features\n\n- 🧠 Classifies text to determin if it's safe or fraud\n- 💻 Frontend built with React for a seamless user experience\n- ⚡ Fast and responsive backend with FastAPI\n- 📜 API documentation available at `/docs` for easy interaction\n- 🧪 Easy to train and customize model\n\n---\n\n## 🛠️ Tech Stack\n\n- **Frontend**: React, SASS\n- **Backend**: FastAPI, Pydantic\n- **Modeling**: Huggingface Transformers, DistilBERT (uncased)\n\n---\n\n## 📦 Development\n\n```bash\n# Clone the repo\ngit clone https://github.com/markcalendario/detext.git\ncd detext\n```\n\n### Client\n\n```bash\n# Navigate to the client directory\ncd client\n\n# Install dependencies\nnpm install\n\n# Start the development server\nnpm run dev\n```\n\n### Server\n\n```bash\n# Navigate to the server directory\ncd server\n\n# Install dependencies\npip install -r requirements.txt\n\n# Start the FastAPI server\nfastapi dev main.py\n```\n\n### Trainer\n\nTo train the model, follow these steps:\n\n**Create a virtual environment**:\n\n```bash\ncd trainer\npython -m venv venv\n```\n\n**Activate the virtual environment**:\n\n```bash\n.\\venv\\Scripts\\activate\n```\n\n**Create a Jupyter kernel** for the virtual environment:\n\n```bash\npip install ipykernel\n\npython -m ipykernel install --user --name=detext-venv\n\n# Restart the code editor to switch to the new kernel\n```\n\n**Run the training notebook**:\n\nOpen the notebook `trainer.ipynb` and train the model using Huggingface transformers.\n\n---\n\n## 🤖 After Training\n\nOnce the model is trained, copy the model files to the backend to be used for predictions.\n\n```bash\n# Copy the trained model to the server's model dir\ncp -r trainer/out/detext_dataset/* server/model/detext/\n```\n\nEnsure the model files include:\n\n- The model checkpoint (e.g., `pytorch_model.bin` or similar)\n- The model configuration (e.g., `config.json`)\n- Tokenizer files (e.g., `tokenizer.json`)\n\n---\n\n## 📄 Usage\n\nOnce the project is set up and running, you can:\n\n1. **Run the React frontend**:\n\n   - Open a web browser and navigate to `http://localhost:5173` (default port for React).\n   - Input text into the provided form, and the system will classify whether it is **safe** or **fraud**.\n\n2. **Access FastAPI Documentation**:\n\n   - The FastAPI backend provides interactive API documentation at `http://localhost:8000/docs`.\n   - Here you can view available endpoints, try them out, and see example requests and responses for the text classification service.\n\n## 🚀 Deployment\n\n```bash\n# Build and run client and server concurrently using docker compose\ndocker compose up --build -d\n```\n"
  },
  {
    "id": "auralyze-ai",
    "title": "AURALYZE AI",
    "description": "An intelligent tool that transcribes audio files and generates concise summaries, showcasing the capabilities of transformer-based models in natural language understanding.",
    "image": "auralyze.webp",
    "stack": ["huggingface", "react", "fastapi", "sass", "docker"],
    "markdown": "# 🎧 Auralyze\n\n**Auralyze** is a web-based AI tool that transcribes and summarizes spoken audio using advanced speech recognition and natural language processing. Upload or drop audio files to get clean, concise summaries of conversations, meetings, and voice notes. **This is an introductory project to NLP.**\n\n---\n\n## 🎯 Purpose\n\nTo learn and use the basic functions of huggingface's transformers.\n\n---\n\n## 🚀 Features\n\n- 🎙️ Upload or drag-and-drop audio files\n- 🧠 Speech-to-text powered by Whisper of OpenAI\n- ✂️ Summarization using transformer models (BART)\n- 💻 Web UI built with React and SCSS Modules\n- ⚡ Fast, responsive interface with drag-over feedback\n- 🧪 Easy to customize and extend\n\n---\n\n## 🛠️ Tech Stack\n\n- **Frontend**: React, SASS Modules\n- **Backend**: FastAPI, Hugging Face Transformers\n- **Speech-to-Text**: OpenAI Whisper\n- **Summarization**: BART\n- **Deployment**: Docker, Vercel/Render\n\n---\n\n## 📦 Development\n\n```bash\n# Clone the repo\ngit clone https://github.com/markcalendario/auralyze.git\ncd auralyze\n```\n\n### Client\n\n```bash\n# Navigate to client directory\ncd client\n\n# Install dependencies\nnpm install\n\n# Start the development server\nnpm run dev\n```\n\n### Server\n\n```bash\n# Navigate to client directory\ncd server\n\n# Set environment to development\nSET ENV=dev\n\n# Install dependencies\npip install -r requirements.txt\n\n# Start the development server\nfastapi dev main.py\n```\n\n## 🚀 Deployment\n\n```bash\n# Build and run client and server concurrently in a detached screen\ndocker compose up --build -d\n```"
  },
  {
    "id": "iykyk-lang",
    "title": "IYKYK LANG",
    "description": "A real-time collaborative platform for analyzing lexical and syntax structures in the IYKYK programming language, designed to support shared code understanding and experimentation.",
    "image": "iykyk-lang.webp",
    "stack": ["next", "socket.io", "express"],
    "markdown": "# IYKYK Lexer and Parser\n\nA real-time collaborative lexical and syntax analyzer of a GenZ-styled IYKYK programming language.\n\nThis programming language facilitates real-time collaborative editing of source code, allowing multiple developers to edit code within a live session. The language's portal is powered by Socket.IO, which manages real-time changes between sessions.\n\n## App Walkthrough\n\n**Landing Screen**\n\nThe landing screen allows users or developers to join or create a room for a coding session.\n\n![Landing Screen](https://raw.githubusercontent.com/markcalendario/IYKYK-programming-language/main/docs/snapshots/welcome-screen.jpg)\n\n**Room View**\n\nThe room view consists of blocks of components such as toolbar, code editor, and side popups. The toolbar includes buttons for parser, lexer, copy session link, upload file, and download file respectively. The code editor updates in real-time as clients commit code changes. The popups will show when someone joins or gets disconnected.\n\n![Room View](https://raw.githubusercontent.com/markcalendario/IYKYK-programming-language/main/docs/snapshots/room-view.jpg)\n\n*Room View with Lexer Result*\n\nThe result of lexical analysis will display a table that shows a line, lexeme, and token category of each symbols.\n\n![Room View - Lexer](https://raw.githubusercontent.com/markcalendario/IYKYK-programming-language/main/docs/snapshots/lexer-result.jpg)\n\n*Room View with Parser Result*\n\nThe result of syntax analyzer will show the parse tree if the code structure is correct. Otherwise, it will display an error message including line of the error and expectations.\n\n![Room View - Parser](https://raw.githubusercontent.com/markcalendario/IYKYK-programming-language/main/docs/snapshots/parser-result.jpg)\n\n*Sample Parser Error* \n\n![Sample Parser Error](https://raw.githubusercontent.com/markcalendario/IYKYK-programming-language/main/docs/snapshots/sample-parser-error.jpg)\n\n## Tech Stack\n\n**Client:** Next, SASS\n\n**Server:** Node, Express, Socket.IO\n\n## Documentation\n\n[Lexer Documentation](https://github.com/markcalendario/IYKYK-programming-language/blob/main/docs/documents/IYKYK%20Programming%20Language%20Documentation%20-%20GROUP%202.pdf)\n\n[Parser Documentation](https://github.com/markcalendario/IYKYK-programming-language/blob/main/docs/documents/IYKYK%20Syntax%20Analyzer%20Documentation%20-%20Group%202%20-%20BSCS%203-1N.pdf)\n\n## License\n\nCopyright © 2024 Mark Kenneth S. Calendario. All rights reserved.\n\nThis code is protected by the copyright law. No part of this system may be reproduced, distributed, or transmitted in any form or by any means, without the prior written permission of the copyright holder.\n\nFor permission requests, please contact: markcalendario@gmail.com"
  },
  {
    "id": "accuratax",
    "title": "AccuraTax",
    "description": "A user-friendly platform designed to simplify the complexities of the Philippine tax system, helping users better understand and manage their tax responsibilities.",
    "image": "accuratax.webp",
    "stack": ["react", "express", "prisma", "mysql"],
    "markdown": "# 📊 AccuraTax\n\n**AccuraTax** is a user-friendly platform designed to simplify the complexities of the **Philippine tax system**, helping users better understand and manage their tax responsibilities.\n\n---\n\n## 🧩 Key Features\n\n- Simple and intuitive tax management interface\n- Designed specifically for the Philippine tax structure\n- Streamlines filing, tracking, and understanding tax obligations\n- Database-driven structure for secure, scalable storage and access\n\n---\n\n## 🛠 Tech Stack\n\n- **Frontend:** React  \n- **Backend:** Express.js  \n- **Database ORM:** Prisma  \n- **Database:** MySQL\n\n---\n\n## 🚀 Getting Started\n\n### 1. Clone the Repository\n\n```bash\ngit clone https://github.com/markcalendario/accuratax.git\ncd accuratax\n```\n\n### 2. Install Dependencies\n\n#### Client\n\n```bash\ncd client\nnpm install\nnpm run dev\n```\n\n#### Server\n\n```bash\ncd server\nnpm install\nnpm run dev\n```\n\n### 3. Database Setup\n\nMake sure you have MySQL installed and running.\n\nUpdate your `.env` file with your MySQL credentials:\n\n```env\nDATABASE_URL=\"mysql://username:password@localhost:3306/accuratax\"\n```\n\nThen run:\n\n```bash\nnpx prisma migrate dev\nnpx prisma generate\n```\n\n---\n\n## 📬 Contact\n\nFor inquiries or contributions, please open an issue or pull request.\n\n"
  },
  {
    "id": "awit",
    "title": "AWIT",
    "description": " A creative tool that generates chord progressions using a Genetic Algorithm, providing musicians and composers with unique musical sequences and inspiration.",
    "image": "awit.webp",
    "stack": ["react", "sass", "tone"],
    "markdown": "# 🎵 AWIT\n\n**AWIT** is a creative tool that generates chord progressions using a **Genetic Algorithm**, providing musicians and composers with unique musical sequences and inspiration.\n\n---\n\n## 🎯 Description\n\nWhether you're a songwriter looking for inspiration or a composer exploring new harmonic possibilities, **AWIT** helps you craft innovative chord progressions by simulating the process of natural selection.\n\n---\n\n## 🧠 Key Features\n\n- 🎼 Generate unique chord progressions via genetic algorithms\n- 🧬 Evolution-based music generation for fresh, non-repetitive results\n- 🎧 Real-time audio playback using Tone.js\n- 🎨 Sleek and responsive UI with React and SASS\n\n---\n\n## 🛠 Tech Stack\n\n- **Frontend:** React\n- **Styling:** SASS\n- **Sound Engine:** Tone.js\n\n---\n\n## 🚀 Getting Started\n\n### 1. Clone the Repository\n\n```bash\nhttps://github.com/markcalendario/chord-progression-genetic-algorithm.git\ncd chord-progression-genetic-algorithm\n```\n\n### 2. Install Dependencies\n\n```bash\nnpm install\n```\n\n### 3. Start the Development Server\n\n```bash\nnpm run dev\n```\n\nThe app will start on `http://localhost:5173` by default.\n\n---\n\n## 💡 Inspiration\n\nAWIT blends the world of **evolutionary algorithms** and **music theory**, making it an experimental tool for exploring how AI can assist in creative processes.\n\n---\n\n## 📄 License\n\nMIT License. Feel free to use, modify, and contribute.\n"
  },
  {
    "id": "apcis",
    "title": "APCIS",
    "description": "An Automated Police Clearance Issuance System featuring face recognition, developed as a final project for a Modelling and Simulation course to streamline identity verification.",
    "image": "police-clearance-issuance-system.webp",
    "stack": ["python", "tkinter", "opencv"],
    "markdown": "# 🚓 Automated Police Clearance Issuance System with Facial Recognition\n\nA final project for **Modelling and Simulation** that streamlines the issuance of police clearances with integrated facial recognition for enhanced security.\n\n---\n\n## ✨ Features\n\n### 👤 Wanted Detection\n- Capture face of the client and extract facial structure using **Haarcascade**.\n- Compare the captured face with the **wanted list** in the database.\n- **Alarm** the inspector if a match is found.\n- If no match is found, proceed to **clearance form**.\n\n### 📄 Automated Clearance Generation\n- Generate a printable clearance form automatically for clients **without derogatory records**.\n\n### 🔍 Clearance Status Checker\nCheck if a scanned or selected clearance is:\n- ✅ **Valid**\n- ❌ **Revoked**\n- ⏳ **Expired** (clearance is valid for 6 months)\n- ❓ **Invalid**\n\n### 💾 File-based Database System\n- Store client data to prevent **QR code forgery**\n- Maintain and query a **wanted list**\n\n### 📂 Wanted List Management\n- Import facial data of wanted individuals\n- Remove entries from the wanted list as needed\n\n### 🔐 Login System\n- Default credentials:\n  - **Username:** `a`\n  - **Password:** `a`\n\n---\n\n## 🖼️ Screenshots\n\n![App Screenshot](https://raw.githubusercontent.com/markcalendario/automated-police-clearance-issuance-system/main/docs/screenshot.png)\n\n---\n\n## 🛠️ Support\n\n- 🌐 [markcalendario10.web.app](https://markcalendario10.web.app)\n- 💻 [GitHub: markcalendario](https://github.com/markcalendario)\n\n---\n\n## 👥 All Rights Reserved\n\n© Copyright Holders:\n\n- [**Mark Kenneth Calendario**](https://github.com/markcalendario) — *Project Manager, System Developer*\n- **Gwyneth Yim** — *Technical Designer*\n- **Jeo Abarre** — *UI/UX Designer*\n- **Czarina Khiara Borja** — *Technical Writer*\n- **Jaycee Brigola** — *Technical Writer*\n- **Sean Matthew Sinalubong** — *System Analyst*\n- **Jan Miles Cruz** — *Business Analyst*\n- **Micole Vedasto** — *Technical Designer*\n"
  },
  {
    "id": "shopitty",
    "title": "SHOPITTY",
    "description": "An e-commerce platform that enables seamless online shopping experiences, complete with a secure checkout process through Stripe integration for fast and reliable payments.",
    "image": "shopitty.webp",
    "stack": ["stripe", "react", "sass", "express", "mongodb"],
    "markdown": "## 🚀 Download\n[![portfolio](https://img.shields.io/badge/Source_Code-000?style=for-the-badge&logo=github&logoColor=white)](https://github.com/markcalendario/e-commerce-with-stripe)\n\n# 🛒 Shopitty\n\nA simple and plain **E-commerce MERN application** with **Stripe** payment gateway integration.\n\nThe main focus of this project is to implement the payment gateway using Stripe.\n\n---\n\n## 🌍 Environment Variables\n\n### 🔧 Client Environment\nPlace the following variables in the `.env` file inside the `client` folder:\n\n```env\nREACT_APP_API_URL=\"http://localhost:7777\"\nGENERATE_SOURCEMAP=false\n```\n\n### 🔧 Server Environment\nPlace the following variables in the `.env` file inside the `server` folder:\n\n```env\nPORT=7777\nORIGIN=\"http://localhost:3000\"\nSERVER=\"http://localhost:7777\"\nDATABASE_URI=\"mongodb://localhost:27017\"\nSTRIPE_URI=\"YOUR STRIPE SECRET HERE\"\n```\n\n---\n\n## 📦 Installation\n\n### 1. Clone the Repository\n```bash\ngit clone https://github.com/markcalendario/e-commerce-with-stripe.git\ncd e-commerce-with-stripe\n```\n\n### 2. Install All Packages\n```bash\nnpm install\n```\n\n### 3. Start the Client\n```bash\ncd client\nnpm start\n```\nThe client runs at `http://localhost:3000`\n\n### 4. Start the Server\n```bash\ncd ../server\nnpm start\n```\nThe server runs at `http://localhost:7777`\n\n---\n\n## 🛢️ Database Initialization\n\nInsert the following data in the `shopitty` database and `products` collection in MongoDB:\n\n```json\n[\n  {\n    \"_id\": { \"$oid\": \"630330e5ae8f95f539392009\" },\n    \"title\": \"Colorful Slip-on Unisex Streetwear Sneakers Fashion\",\n    \"description\": \"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nisi, ex. Hic, voluptatibus avudera.\",\n    \"price\": 120.5,\n    \"imageId\": \"630330e5ae8f95f539392009.jpg\"\n  },\n  {\n    \"_id\": { \"$oid\": \"6303321bae8f95f53939200a\" },\n    \"title\": \"White Sneakers for Sport with Blue Outline\",\n    \"description\": \"Lorem ipsum dolor sit amet, consectetur adipisicing elit. Nisi, ex. Hic, voluptatibus avudera.\",\n    \"price\": 199.99,\n    \"imageId\": \"6303321bae8f95f53939200a.webp\"\n  }\n]\n```\n\n---\n\n## 🧠 Lessons Learned\n\n### ✅ What I learned from implementing Stripe:\n- Stripe is simple and developer-friendly.\n- Offers a testing phase for safe development.\n\n### ➕ Pros\n- Simple and intuitive API\n- Great community support\n- Fast integration and setup\n\n### ➖ Cons\n- Production mode not yet available in the Philippines (test only)\n\n---\n\n## 🔌 Stripe API\n\nThis project uses the [Checkout API](https://stripe.com/docs/api/checkout/sessions/create) from Stripe.\n\n---\n\n## 🖼️ Screenshots\n\n### 🔐 Login Page\n![Login](https://i.imgur.com/javFszA.png)\n\n### 🛍️ Shop Page\n![Shop](https://i.imgur.com/mVgfePv.png)\n\n### 🛒 Cart Page\n![Cart](https://i.imgur.com/dUIDp7v.png)\n\n### 💳 Payment Page (Stripe)\n![Payment](https://i.imgur.com/4HxPEE3.png)\n\n### ✅ Payment Success Page\n![Success](https://i.imgur.com/niLDryE.png)\n\n### ❌ Payment Cancelled Page\n![Cancelled](https://i.imgur.com/xObaQ8I.png)\n\n---\n\n## 📄 License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n\n---\n\n## 👤 Author\n\n- [@markcalendario](https://www.github.com/markcalendario)"
  },
  {
    "id": "messenger",
    "title": "MESSENGER",
    "description": "A real-time chat application that supports instant communication between users, offering a smooth and responsive messaging experience through live WebSocket connections.",
    "image": "messenger.webp",
    "stack": ["react", "sass", "express", "websocket", "mongodb"],
    "markdown": "## 🚀 Download\n[![portfolio](https://img.shields.io/badge/Source_Code-000?style=for-the-badge&logo=github&logoColor=white)](https://github.com/markcalendario/socket.io-guide)\n\n# 🔌 Socket.io Guide\n\nAn implementation guide for **Socket.io** with **React.js**.\n\n---\n\n## 📚 Documentation\n\n- [Server Docs](https://socket.io/docs/v4/)\n- [Client Docs](https://socket.io/docs/v4/client-api/)\n\n---\n\n## 🧠 Lessons Learned\n\n### 🔹 Custom Events\nSocket.io allows developers to define custom events easily.\n\n**Client (React):**\n```javascript\nimport { io } from \"socket.io-client\";\nconst socket = io(\"[url where to connect]\");\nsocket.emit(\"hello\", data);\n```\n\n**Server (Node.js):**\n```javascript\nimport { Server } from \"socket.io\";\nconst io = new Server(PORT);\n\nio.on(\"connection\", (socket) => {\n  socket.on(\"hello\", (data) => {\n    // process the data\n  });\n});\n```\n\n### 🔹 Rooms\nSocket.io supports rooms for more granular message broadcasting.\n\n**Join a Room:**\n```javascript\nsocket.join(roomID);\n```\n\n**Leave a Room:**\n```javascript\nsocket.leave(roomID);\n```\n_💡 Place these inside event listeners (e.g., inside `socket.on(...)`)._\n\n### 🔹 Emitting to Rooms\n\nYou can emit events to specific rooms:\n```javascript\n// To sender only\nsocket.emit('event_here', data.message);\n\n// To all clients including sender\nio.emit('event_here', data.message);\n\n// To all clients except sender\nsocket.broadcast.emit('event_here', data.message);\n\n// To all in room except sender\nsocket.broadcast.to(data.room).emit('event_here', data.message);\n\n// To all in room including sender\nio.in(data.room).emit('event_here', data.message);\n\n// To sender if in room\nsocket.to(room).emit('event_here', data.message);\n\n// To all in namespace\nio.of('myNamespace').emit('event_here', data.message);\n\n// To specific socket ID\nsocket.broadcast.to(socketid).emit('event_here', data.message);\n```\n\n📎 References:\n- [Emit Cheatsheet #1](https://stackoverflow.com/a/10099325/15958428)\n- [Emit Cheatsheet #2](https://socket.io/docs/v3/emit-cheatsheet/)\n\n---\n\n## 🛠 Tech Stack\n\n- **Client:** React  \n- **Server:** Node.js, Socket.io\n\n---\n\n## 📄 License\n\n[MIT](https://choosealicense.com/licenses/mit/)\n\n---\n\n## 👤 Author\n\n- [@markcalendario](https://www.github.com/markcalendario)"
  },
  {
    "id": "defuse-da-bomb",
    "title": "DEFUSE DA BOMB",
    "description": "A strategic puzzle game where players defuse bombs by navigating mazes using the Depth-First Search algorithm, created for a Design and Analysis Algorithms course.",
    "image": "defuse-da-bomb.webp",
    "stack": ["next", "sass"],
    "markdown": "# 💣 Defuse Da Bomb\n\nA bomb-defusing game using the **Depth-First Traversal Algorithm**. This was developed as a final project for the **Design Analysis and Algorithm** course during the second term of the Computer Science program.\n\n---\n\n## 🖼️ Screenshots\n\n![Game Screenshot](https://i.imgur.com/NQnXu23.png)\n\n---\n\n## 🛠️ Tech Stack\n\n- **Client:** Next.js, Sass\n\n---\n\n## ©️ Copyright Notice\n\nCopyright © Mark Kenneth S. Calendario, John Race Levardo, Zoe Tatianna Ong, Gwyneth Anmarie Yim. All rights reserved.\n\nThis code is protected by copyright law. No part of this system may be reproduced, distributed, or transmitted in any form or by any means without prior written permission of the copyright holders.\n\n📧 For permission requests, please contact: **markcalendario@gmail.com**"
  },
  {
    "id": "fastfood-kiosk",
    "title": "FASTFOOD KIOSK",
    "description": "A modern redesign of the Jollibee ordering system, developed as a final project to improve user interaction and streamline fast-food service through a digital interface.",
    "image": "fastfood-kiosk.webp",
    "stack": ["csharp", "xaml"],
    "markdown": "# 🍔 Fastfood Kiosk\n\nA redesigned Jollibee Kiosk. A final project for Applications Development and Emerging Technologies.\n\n---\n\n## 📱 App Preview\n\n**On start**\n![Start Screen](https://raw.githubusercontent.com/markcalendario/fastfood-kiosk/main/.github/images/preview1.png)\n\n**Categories**\n![Categories](https://raw.githubusercontent.com/markcalendario/fastfood-kiosk/main/.github/images/preview2.png)\n\n**Chicken Joy Category**\n![Chicken Joy](https://raw.githubusercontent.com/markcalendario/fastfood-kiosk/main/.github/images/preview3.png)\n\n**Payment Section**\n![Payment](https://raw.githubusercontent.com/markcalendario/fastfood-kiosk/main/.github/images/preview4.png)\n"
  },
  {
    "id": "au-sms",
    "title": "AU-SMS",
    "description": "A comprehensive Student Management System developed for Arellano University, recognized with the Best in Research Award.",
    "image": "ausms.webp",
    "stack": ["html", "css", "php", "mysql"],
    "markdown": "# Arellano University Student Information Management System\n\nAn Arellano University's Student Information System that manages students' basic information, grades, and section.\n\nIt was developed as a partial requirement for the Practical Research 2 subject in Grade 12.\n\n---\n\n## 🏆 Awards and Recognitions\n\n![Best in Research](https://img.shields.io/badge/BEST_IN_RESEARCH-0052CC?style=for-the-badge&label=AWARD&logoColor=white&labelColor=yellow)\n\n![Best in Software](https://img.shields.io/badge/BEST_IN_SOFTWARE-0052CC?style=for-the-badge&label=AWARD&logoColor=white&labelColor=yellow)\n\n![Participated in Research Colloquium](https://img.shields.io/badge/PARTICIPATED_IN_RESEARCH_COLLOQUIUM-0052CC?style=for-the-badge&label=REP&logoColor=white&labelColor=yellow)\n\n---\n\n## Features\n\n- Secure Login System\n- Three User Types\n- Automatic Student Report Card (Form 138) Generation\n- Manage Students\n- Manage Teachers\n- Manage Subjects\n- Teacher Announcement System\n- Action Logs\n- Cross platform\n\n---\n\n## Authors\n\n- [Mark Kenneth Calendario](https://www.github.com/markcalendario)\n- Arñe Sonder Kiel Diestra\n- Carl Joseph Delos Reyes\n- Carl Joseph Suñga\n- Shawn Ashley Hernandez\n\n---\n\n## Tech Stack\n\n**Client:**\n\n![HTML5](https://img.shields.io/badge/HTML5-E34F26?style=for-the-badge&logo=html5&logoColor=white) ![Sass](https://img.shields.io/badge/Sass-CC6699?style=for-the-badge&logo=sass&logoColor=white)\n\n**Server:**\n\n![PHP](https://img.shields.io/badge/PHP-777BB4?style=for-the-badge&logo=php&logoColor=white)\n\n**Database:**\n\n![MySQL](https://img.shields.io/badge/MySQL-00000F?style=for-the-badge&logo=mysql&logoColor=white)\n\n---\n\n## All Rights Reserved\n\n© [Mark Kenneth Calendario](https://github.com/markcalendario)\n\nNo part of this code may be reproduced, distributed, or transmitted in any form or by any means without the prior written permission of the copyright owner."
  },
  {
    "id": "pup-map",
    "title": "PUP MAP",
    "description": "An interactive campus guide for PUP Sta. Mesa, designed to help visitors navigate buildings and facilities more easily.",
    "image": "pup-map.webp",
    "stack": ["html", "css", "javascript"],
    "markdown": "# PUP MAP\n\n## Overview\nPUP MAP is an interactive campus guide created specifically for the Polytechnic University of the Philippines, Sta. Mesa campus. This tool aims to provide students, faculty, visitors, and new enrollees with an easy and intuitive way to navigate through various buildings, classrooms, and facilities on campus.\n\n## Features\n- Interactive map with clickable building markers\n- Search functionality to quickly find buildings or facilities\n- Responsive design for use on both desktop and mobile devices\n- Detailed descriptions and photos for key campus locations\n\n## Technology Stack\n- **HTML5**: For semantic structure and markup\n- **CSS3**: Styling and responsive layout design\n- **JavaScript**: Interactive map features and event handling\n\n## How to Use\n1. Open the PUP MAP website on your browser.\n2. Use the map to locate different buildings.\n3. Click on building markers for more information.\n4. Use the search bar to find specific locations quickly.\n\n## Future Improvements\n- Integration with GPS for real-time navigation\n- Addition of indoor maps for complex buildings\n- Multi-language support\n\n## License\nThis project is open-source and available under the MIT License.\n\n---\n\n*For more information or to contribute, please contact the project maintainer.*"
  }
]
